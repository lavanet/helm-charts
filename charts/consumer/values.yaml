global:
  # -- Default domain used by all components
  ## Used for ingresses, certificates, etc.
  domain: my-consumer.local

# -- The number of consumer pods to run.
replicaCount: 1

image:
  # -- Repository to use for the consumer
  repository: ghcr.io/lavanet/lava/lavap
  # -- Image pull policy for the consumer
  pullPolicy: IfNotPresent
  # -- Tag to use for the consumer
  # @default -- `""` (defaults to Chart.appVersion)
  tag: ""

# -- Secrets with credentials to pull images from a private registry
imagePullSecrets: []
# -- Consumer a name in place of release name
nameOverride: ""
# -- String to fully override `"consumer.fullname"`
fullnameOverride: ""

serviceAccount:
  # -- specifies whether a service account should be created
  create: true
  # -- annotations to add to the service account
  annotations: {}
  # -- the name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations for the all deployed pods
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Consumer pods service type
  type: ClusterIP

ingress:
  # -- Enable an ingress resource for the consumers
  enabled: false
  # -- Defines which ingress controller will implement the resource
  className: "nginx"
  # -- Additional ingress labels
  labels: {}
  # -- Additional ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Enable TLS configuration for the domain defined at `global.domain`
  ## TLS certificate will be retrieved from a TLS secret with name: `consumer-tls`
  tls: true
  # -- The path to Consumer
  path: /
  # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
  pathType: Prefix
  # -- Custom Ingress TLS secret
  tlsSecretName:

ingressGrpc:
  # -- Enable a grpc ingress resource for the consumers
  enabled: false
  # -- Defines which ingress controller will implement the resource
  className: "nginx"
  # -- Additional ingress labels
  labels: {}
  # -- Additional ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Enable TLS configuration for the domain defined at `global.domain`
  ## TLS certificate will be retrieved from a TLS secret with name: `consumer-grpc-tls`
  tls: true
  # -- The path to Consumer
  path: /
  # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
  pathType: Prefix
  # -- Custom GRPC Ingress TLS secret
  tlsSecretName:

# TLS certificate configuration via cert-manager
certificate:
  # -- Deploy a Certificate resource (requires cert-manager)
  enabled: false
  # -- Certificate primary domain (commonName)
  # @default -- `""` (defaults to global.domain)
  domain: ""
  # -- Certificate Subject Alternate Names (SANs)
  additionalHosts: []
  # -- The requested 'duration' (i.e. lifetime) of the certificate.
  # @default -- `""` (defaults to 2160h = 90d if not specified)
  ## Ref: <https://cert-manager.io/docs/usage/certificate/#renewal>
  duration: ""
  # -- How long before the expiry a certificate should be renewed.
  # @default -- `""` (defaults to 360h = 15d if not specified)
  ## Ref: <https://cert-manager.io/docs/usage/certificate/#renewal>
  renewBefore: ""
  # Certificate issuer
  ## Ref: <https://cert-manager.io/docs/concepts/issuer>
  issuer:
    # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
    group: ""
    # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
    kind: ""
    # -- Certificate issuer name. Eg. `letsencrypt`
    name: ""
  # Private key of the certificate
  privateKey:
    # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
    rotationPolicy: Never
    # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
    encoding: PKCS1
    # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
    algorithm: RSA
    # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
    size: 2048
  # -- Annotations to be applied to the Server Certificate
  annotations: {}
  # -- Usages for the certificate
  ### Ref: <https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage>
  usages: []
  # -- Annotations that allow the certificate to be composed from data residing in existing Kubernetes Resources
  secretTemplateAnnotations: {}

## Probes for consumer
readinessProbe:
  # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds after the container has started before [probe] is initiated
  initialDelaySeconds: 10
  # -- How often (in seconds) to perform the [probe]
  periodSeconds: 10
  # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
  successThreshold: 1
  # -- Number of seconds after which the [probe] times out
  timeoutSeconds: 1

livenessProbe:
  # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
  failureThreshold: 3
  # -- Number of seconds after the container has started before [probe] is initiated
  initialDelaySeconds: 10
  # -- How often (in seconds) to perform the [probe]
  periodSeconds: 10
  # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
  successThreshold: 1
  # -- Number of seconds after which the [probe] times out
  timeoutSeconds: 1

# -- Resource limits and requests for the consumers pods
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Consumer
  enabled: false
  # -- Minimum number of replicas for the Consumer [HPA]
  minReplicas: 1
  # -- Maximum number of replicas for the Consumer [HPA]
  maxReplicas: 5
  # -- Average CPU utilization percentage for the Consumer [HPA]
  targetCPUUtilizationPercentage: 50
  # -- Average memory utilization percentage for the Consumer [HPA]
  targetMemoryUtilizationPercentage: 50
  # -- Configures the scaling behavior of the target in both Up and Down directions.
  behavior: {}
    # scaleDown:
    #  stabilizationWindowSeconds: 300
    #  policies:
    #   - type: Pods
    #     value: 1
    #     periodSeconds: 180
    # scaleUp:
    #   stabilizationWindowSeconds: 300
    #   policies:
    #   - type: Pods
    #     value: 2
    #     periodSeconds: 60
  # -- Configures custom HPA metrics for the Consumer
  # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/

# -- [Node selector]
nodeSelector: {}

# -- [Tolerations] for use with node taints
tolerations: []

# -- Assign custom [affinity] rules to the deployment
affinity: {}

log:
  # -- Consumer pod log level
  level: info
  # -- Consumer pod log format, can be json or text
  format: json

# -- Provider geo-location can be one of the [geolocations](https://docs.lavanet.xyz/provider-setup#geolocations)
geolocation: 2

# -- Lava node to connect to
node: https://testnet2-rpc.lavapro.xyz:443

# -- Lava chain id
chainId: lava-testnet-2

# -- Consumer keyring backend
keyringBackend: test

# -- Wallet name
wallet: test

key:
  # -- The kubernetes secret name containing the private key
  secretName: "wallet"
  # -- The key in the kubernetes secret to use
  secretKey: "key"
  # -- The kubernetes secret that contains the password for the private key
  passwordSecretName: "wallet"
  # -- The key in the kubernetes secret that contains the password for the private key
  passwordSecretKey: "password"

cache:
  # -- Should add cache arg
  enabled: true
  # -- Cache address
  address: cache:20100

# -- Should disable conflict transactions
disableConflictTransactions: true

# -- Address of the relay server
relayServerAddress:

# -- Address of the report server
reportsBeAddress:

# -- Lavap consumer additional CLI arguments
additionalArgs: []
  # - --fees
  # - 10ulava
  # - --note
  # - "A personal note"

metrics:
  # -- Should enable prometheus metrics
  enabled: true
  # -- Prometheus metrics address
  port: 9000
  serviceMonitor:
    # -- Enable a prometheus ServiceMonitor
    enabled: false
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus ServiceMonitor selector
    selector: {}
      # prometheus: kube-prometheus

    # -- Prometheus ServiceMonitor scheme
    scheme: ""
    # -- Prometheus ServiceMonitor tlsConfig
    tlsConfig: {}
    # -- Prometheus ServiceMonitor namespace
    namespace: "" # "monitoring"
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}
    # -- Prometheus ServiceMonitor annotations
    annotations: {}

# @ignored
chains:
  # lav1:
  #   default_interface: rest
  #   interfaces:
  #     - interface: rest
  #       port: 2020
  #     - interface: tendermintrpc
  #       port: 2021
  #     - interface: grpc
  #       port: 2022
  #       staticProviders:
  #         - url: eth-provider.lava-system.svc.cluster.local:2200
  #           addons:
  #             - debug
